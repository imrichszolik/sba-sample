// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lomtec.Proxy.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for User.
    /// </summary>
    public static partial class UserExtensions
    {
            /// <summary>
            /// Gets list of users.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100. The allowed functions are: allfunctions.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Limits the number of items returned from a collection. The maximum value is
            /// 20.
            /// </param>
            /// <param name='skip'>
            /// Excludes the specified number of items of the queried collection from the
            /// result.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            public static UserDtoIEnumerableODataValue GetUsers(this IUser operations, string filter = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = false)
            {
                return operations.GetUsersAsync(filter, orderby, top, skip, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets list of users.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100. The allowed functions are: allfunctions.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Limits the number of items returned from a collection. The maximum value is
            /// 20.
            /// </param>
            /// <param name='skip'>
            /// Excludes the specified number of items of the queried collection from the
            /// result.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserDtoIEnumerableODataValue> GetUsersAsync(this IUser operations, string filter = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersWithHttpMessagesAsync(filter, orderby, top, skip, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create the user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The user.
            /// </param>
            public static object CreateUser(this IUser operations, UserCreateDto body = default(UserCreateDto))
            {
                return operations.CreateUserAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create the user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The user.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateUserAsync(this IUser operations, UserCreateDto body = default(UserCreateDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUserWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The user.
            /// </param>
            public static object UpdateUser(this IUser operations, UserUpdateDto body = default(UserUpdateDto))
            {
                return operations.UpdateUserAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The user.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateUserAsync(this IUser operations, UserUpdateDto body = default(UserUpdateDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateUserWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user identifier.
            /// </param>
            public static object GetUser(this IUser operations, System.Guid userId)
            {
                return operations.GetUserAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUserAsync(this IUser operations, System.Guid userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user identifier.
            /// </param>
            public static Status DeleteUser(this IUser operations, System.Guid userId)
            {
                return operations.DeleteUserAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Status> DeleteUserAsync(this IUser operations, System.Guid userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteUserWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get user role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user identifier.
            /// </param>
            public static RoleDtoArrayODataValue GetUserRoles(this IUser operations, System.Guid userId)
            {
                return operations.GetUserRolesAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get user role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleDtoArrayODataValue> GetUserRolesAsync(this IUser operations, System.Guid userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserRolesWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add the role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user identifier.
            /// </param>
            /// <param name='roleId'>
            /// The role identifier.
            /// </param>
            public static Status AddUserRole(this IUser operations, System.Guid userId, System.Guid roleId)
            {
                return operations.AddUserRoleAsync(userId, roleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add the role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user identifier.
            /// </param>
            /// <param name='roleId'>
            /// The role identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Status> AddUserRoleAsync(this IUser operations, System.Guid userId, System.Guid roleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddUserRoleWithHttpMessagesAsync(userId, roleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove the role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user identifier.
            /// </param>
            /// <param name='roleId'>
            /// The role identifier.
            /// </param>
            public static Status RemoveUserRole(this IUser operations, System.Guid userId, System.Guid roleId)
            {
                return operations.RemoveUserRoleAsync(userId, roleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove the role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user identifier.
            /// </param>
            /// <param name='roleId'>
            /// The role identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Status> RemoveUserRoleAsync(this IUser operations, System.Guid userId, System.Guid roleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveUserRoleWithHttpMessagesAsync(userId, roleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get stored properties for user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user identifier.
            /// </param>
            public static UserPropertyDtoArrayODataValue GetProperties(this IUser operations, System.Guid userId)
            {
                return operations.GetPropertiesAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get stored properties for user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserPropertyDtoArrayODataValue> GetPropertiesAsync(this IUser operations, System.Guid userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPropertiesWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set, update or delete user property
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user identifier.
            /// </param>
            /// <param name='body'>
            /// The property to set update or delete. Supported properties are: SubjectId.
            /// </param>
            public static Status SetProperty(this IUser operations, System.Guid userId, UserPropertyDto body = default(UserPropertyDto))
            {
                return operations.SetPropertyAsync(userId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set, update or delete user property
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user identifier.
            /// </param>
            /// <param name='body'>
            /// The property to set update or delete. Supported properties are: SubjectId.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Status> SetPropertyAsync(this IUser operations, System.Guid userId, UserPropertyDto body = default(UserPropertyDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetPropertyWithHttpMessagesAsync(userId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lockouts the specified user account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user identifier.
            /// </param>
            /// <param name='lockout'>
            /// if set to {true} [lockout].
            /// </param>
            public static Status Lockout(this IUser operations, System.Guid userId, bool lockout)
            {
                return operations.LockoutAsync(userId, lockout).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lockouts the specified user account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user identifier.
            /// </param>
            /// <param name='lockout'>
            /// if set to {true} [lockout].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Status> LockoutAsync(this IUser operations, System.Guid userId, bool lockout, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LockoutWithHttpMessagesAsync(userId, lockout, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
