// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lomtec.Proxy.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Role.
    /// </summary>
    public static partial class RoleExtensions
    {
            /// <summary>
            /// Get list of the role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100. The allowed functions are: allfunctions.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Limits the number of items returned from a collection. The maximum value is
            /// 20.
            /// </param>
            /// <param name='skip'>
            /// Excludes the specified number of items of the queried collection from the
            /// result.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            public static RoleDtoIEnumerableODataValue GetRoles(this IRole operations, string filter = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = false)
            {
                return operations.GetRolesAsync(filter, orderby, top, skip, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of the role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100. The allowed functions are: allfunctions.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Limits the number of items returned from a collection. The maximum value is
            /// 20.
            /// </param>
            /// <param name='skip'>
            /// Excludes the specified number of items of the queried collection from the
            /// result.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleDtoIEnumerableODataValue> GetRolesAsync(this IRole operations, string filter = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRolesWithHttpMessagesAsync(filter, orderby, top, skip, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create the role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The role.
            /// </param>
            public static RoleDto CreateRole(this IRole operations, RoleCreateDto body = default(RoleCreateDto))
            {
                return operations.CreateRoleAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create the role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The role.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleDto> CreateRoleAsync(this IRole operations, RoleCreateDto body = default(RoleCreateDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRoleWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The role.
            /// </param>
            public static RoleDto UpdateRole(this IRole operations, RoleUpdateDto body = default(RoleUpdateDto))
            {
                return operations.UpdateRoleAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The role.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleDto> UpdateRoleAsync(this IRole operations, RoleUpdateDto body = default(RoleUpdateDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRoleWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// The role identifier.
            /// </param>
            public static RoleDto GetRole(this IRole operations, System.Guid roleId)
            {
                return operations.GetRoleAsync(roleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// The role identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleDto> GetRoleAsync(this IRole operations, System.Guid roleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRoleWithHttpMessagesAsync(roleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// The role identifier.
            /// </param>
            public static RoleDto DeleteRole(this IRole operations, System.Guid roleId)
            {
                return operations.DeleteRoleAsync(roleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// The role identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleDto> DeleteRoleAsync(this IRole operations, System.Guid roleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRoleWithHttpMessagesAsync(roleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get role users.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// The role identifier.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100. The allowed functions are: allfunctions.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Limits the number of items returned from a collection. The maximum value is
            /// 20.
            /// </param>
            /// <param name='skip'>
            /// Excludes the specified number of items of the queried collection from the
            /// result.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            public static UserDtoIEnumerableODataValue GetRoleUsers(this IRole operations, System.Guid roleId, string filter = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = false)
            {
                return operations.GetRoleUsersAsync(roleId, filter, orderby, top, skip, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get role users.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// The role identifier.
            /// </param>
            /// <param name='filter'>
            /// Restricts the set of items returned. The maximum number of expressions is
            /// 100. The allowed functions are: allfunctions.
            /// </param>
            /// <param name='orderby'>
            /// Specifies the order in which items are returned. The maximum number of
            /// expressions is 5.
            /// </param>
            /// <param name='top'>
            /// Limits the number of items returned from a collection. The maximum value is
            /// 20.
            /// </param>
            /// <param name='skip'>
            /// Excludes the specified number of items of the queried collection from the
            /// result.
            /// </param>
            /// <param name='count'>
            /// Indicates whether the total count of items within a collection are returned
            /// in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserDtoIEnumerableODataValue> GetRoleUsersAsync(this IRole operations, System.Guid roleId, string filter = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), bool? count = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRoleUsersWithHttpMessagesAsync(roleId, filter, orderby, top, skip, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
